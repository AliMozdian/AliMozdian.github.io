<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://alimozdian.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://alimozdian.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-01-27T09:06:43+00:00</updated><id>https://alimozdian.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Finding all subsets of a set + C Code</title><link href="https://alimozdian.github.io/blog/2024/code/" rel="alternate" type="text/html" title="Finding all subsets of a set + C Code"/><published>2024-01-27T04:15:00+00:00</published><updated>2024-01-27T04:15:00+00:00</updated><id>https://alimozdian.github.io/blog/2024/code</id><content type="html" xml:base="https://alimozdian.github.io/blog/2024/code/"><![CDATA[<p>This is a beautiful and useful, though simple recursive function for calculation all subsets of a set, in C programming language.</p> <p>I don’t know exactly why but I somehow like the way this function works so logical</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// ^_^Ali^_^</span>

<span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">void</span> <span class="nf">calculate_and_print_array</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="n">inp_arr</span><span class="p">[],</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">bin_arr</span><span class="p">[],</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">size</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">bin_arr</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
        <span class="p">{</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"%d "</span><span class="p">,</span> <span class="n">inp_arr</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">binary</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="n">inp_arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">bin_arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">size</span><span class="p">,</span> <span class="kt">int</span> <span class="n">index</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// This is the mentioed function which changes bin_arr (which is an array of n bits, n = size)</span>
    <span class="c1">// to find all the permutations of a subset</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">index</span> <span class="o">==</span> <span class="n">size</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">calculate_and_print_array</span><span class="p">(</span><span class="n">inp_arr</span><span class="p">,</span> <span class="n">bin_arr</span><span class="p">,</span> <span class="n">size</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">// ---0+++</span>
    <span class="n">bin_arr</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">binary</span><span class="p">(</span><span class="n">inp_arr</span><span class="p">,</span> <span class="n">bin_arr</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">index</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
    <span class="c1">// ---1+++</span>
    <span class="n">bin_arr</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="n">binary</span><span class="p">(</span><span class="n">inp_arr</span><span class="p">,</span> <span class="n">bin_arr</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">index</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// input</span>
    <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
    <span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">inp_arr</span><span class="p">[</span><span class="n">n</span><span class="p">];</span><span class="c1">// the input array (given by user)</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="p">(</span><span class="n">inp_arr</span><span class="p">[</span><span class="n">i</span><span class="p">]));</span>
    <span class="p">}</span>
    <span class="kt">int</span> <span class="n">bin_arr</span><span class="p">[</span><span class="n">n</span><span class="p">];</span> <span class="c1">// the array that represent a binary number to indicate</span>
    <span class="c1">// which members of inp_arr should be in the processing subset.</span>
    <span class="n">binary</span><span class="p">(</span><span class="n">inp_arr</span><span class="p">,</span> <span class="n">bin_arr</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>At the end, I just want to mention that this code is a modified version of the code of a question in our homework task in IUST’s B.P. class.</p>]]></content><author><name></name></author><category term="task-posts"/><category term="C,"/><category term="code,"/><category term="subset"/><summary type="html"><![CDATA[This is just a sample for displaying code, again, just for the task!]]></summary></entry><entry><title type="html">The “Confusing Integral” meme refrence, used in talking with my friends</title><link href="https://alimozdian.github.io/blog/2024/math/" rel="alternate" type="text/html" title="The “Confusing Integral” meme refrence, used in talking with my friends"/><published>2024-01-27T03:45:00+00:00</published><updated>2024-01-27T03:45:00+00:00</updated><id>https://alimozdian.github.io/blog/2024/math</id><content type="html" xml:base="https://alimozdian.github.io/blog/2024/math/"><![CDATA[<p>The integral of mass was a quite challenging concept in Physics class, for me and some of my friends, considering the fact that we havn’t learned the Integral itself yet. Therefore it becomes a kind of meme between us, when we want to mention something confusing!</p> \[x_{cm} = \lim_{n \rightarrow \infty} \frac{\sum_{i=1}^n m_i x}{M} = \frac{\int x\, dm}{\int dm}\]]]></content><author><name></name></author><category term="task-posts"/><category term="Math,"/><category term="Integral,"/><category term="Physics"/><summary type="html"><![CDATA[Using math in here is just the same as in latex, so simple and practical.]]></summary></entry><entry><title type="html">Some memes that I stole from Internet</title><link href="https://alimozdian.github.io/blog/2024/memes/" rel="alternate" type="text/html" title="Some memes that I stole from Internet"/><published>2024-01-26T18:00:00+00:00</published><updated>2024-01-26T18:00:00+00:00</updated><id>https://alimozdian.github.io/blog/2024/memes</id><content type="html" xml:base="https://alimozdian.github.io/blog/2024/memes/"><![CDATA[<p>I know posting meme on a protfolio is not professional, but I hadn’t enough time to post useful thing, at least these are not that boring!</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/myimg_1-480.webp 480w,/assets/img/myimg_1-800.webp 800w,/assets/img/myimg_1-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/myimg_1.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/myimg_6-480.webp 480w,/assets/img/myimg_6-800.webp 800w,/assets/img/myimg_6-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/myimg_6.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/myimg_2-480.webp 480w,/assets/img/myimg_2-800.webp 800w,/assets/img/myimg_2-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/myimg_2.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/myimg_3-480.webp 480w,/assets/img/myimg_3-800.webp 800w,/assets/img/myimg_3-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/myimg_3.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/myimg_4-480.webp 480w,/assets/img/myimg_4-800.webp 800w,/assets/img/myimg_4-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/myimg_4.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/myimg_5-480.webp 480w,/assets/img/myimg_5-800.webp 800w,/assets/img/myimg_5-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/myimg_5.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/myimg_7-480.webp 480w,/assets/img/myimg_7-800.webp 800w,/assets/img/myimg_7-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/myimg_7.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/myimg_8-480.webp 480w,/assets/img/myimg_8-800.webp 800w,/assets/img/myimg_8-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/myimg_8.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/myimg_9-480.webp 480w,/assets/img/myimg_9-800.webp 800w,/assets/img/myimg_9-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/myimg_9.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/myimg_10-480.webp 480w,/assets/img/myimg_10-800.webp 800w,/assets/img/myimg_10-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/myimg_10.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/myimg_11-480.webp 480w,/assets/img/myimg_11-800.webp 800w,/assets/img/myimg_11-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/myimg_11.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/myimg_12-480.webp 480w,/assets/img/myimg_12-800.webp 800w,/assets/img/myimg_12-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/myimg_12.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/myimg_13-480.webp 480w,/assets/img/myimg_13-800.webp 800w,/assets/img/myimg_13-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/myimg_13.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/myimg_14-480.webp 480w,/assets/img/myimg_14-800.webp 800w,/assets/img/myimg_14-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/myimg_14.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/myimg_15-480.webp 480w,/assets/img/myimg_15-800.webp 800w,/assets/img/myimg_15-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/myimg_15.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/myimg_16-480.webp 480w,/assets/img/myimg_16-800.webp 800w,/assets/img/myimg_16-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/myimg_16.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div>]]></content><author><name></name></author><category term="task-posts"/><category term="meme,"/><category term="programming,"/><category term="funny,"/><category term="not_funny"/><summary type="html"><![CDATA[Enjoy reading and not laughing, they aren't that much funny!]]></summary></entry></feed>